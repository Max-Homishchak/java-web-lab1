openapi: 3.0.0
info:
  title: Customer API
  description: API for managing customer data
  version: 1.0.0

paths:
  /api/v1/customers:
    get:
      summary: Get all customers
      tags:
        - Customers
      responses:
        '200':
          description: List of all customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsListDto'
    post:
      summary: Create a new customer
      tags:
        - Customers
      requestBody:
        description: Customer data to create a new customer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDetailsDto'
      responses:
        '200':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/customers/{id}:
    get:
      summary: Get customer by ID
      tags:
        - Customers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the customer to retrieve
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsDto'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsListDto'
    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        description: Customer data to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update existing product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to update
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete existing product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to delete
      responses:
        '200':
          description: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CustomerDetailsDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the customer
        address:
          type: string
          maxLength: 255
          description: Address of the customer
        phoneNumber:
          type: string
          pattern: "^\\+?[0-9. ()-]{7,25}$"
          description: Phone number of the customer
        email:
          type: string
          format: email
          description: Email of the customer
        preferredChannel:
          type: array
          items:
            type: string
          description: Preferred communication channels

    CustomerDetailsListDto:
      type: object
      properties:
        customerDetailsEntries:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDetailsEntry'

    CustomerDetailsEntry:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the customer
        name:
          type: string
          description: Name of the customer
        address:
          type: string
          description: Address of the customer
        phoneNumber:
          type: string
          description: Phone number of the customer
        email:
          type: string
          description: Email of the customer
        preferredChannel:
          type: array
          items:
            type: string
          description: Preferred communication channels

    ProductDto:
      type: object
      properties:
        productType:
          type: string
          description: Type of the product
          nullable: false
          minLength: 1
        name:
          type: string
          description: Name of the product
          nullable: false
          minLength: 1
          maxLength: 100
        price:
          type: number
          format: decimal
          description: Price of the product
          nullable: false
          minimum: 0.0
        description:
          type: string
          description: Description of the product
          nullable: true
        imageUrl:
          type: string
          description: Url of the product's image
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryDto'

    ProductDetailsListDto:
      type: object
      properties:
        productDetailsEntries:
          type: array
          items:
            $ref: '#/components/schemas/ProductEntry'

    ProductEntry:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the product
        productType:
          type: string
          description: Type of the product
        name:
          type: string
          description: Name of the product
        price:
          type: number
          format: decimal
          description: Price of the product
        description:
          type: string
          description: Description of the product
        imageUrl:
          type: string
          description: Url of the product's image
        category:
          $ref: '#/components/schemas/CategoryDto'

    CategoryDto:
      type: object
      properties:
        id:
          type: number
          nullable: false
          minimum: 0
          description: Id of the category
        name:
          type: string
          nullable: false
          minLength: 1
          description: Name of the category


    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ParamsViolationDetails'

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error

    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error
